generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Server {
  id      String          @id @default(cuid())
  emails  ServerEmail[]
  numbers ServerNumber[]
  address ServerAddress[]
  age     ServerAge[]
}

model ServerEmail {
  id       String  @id @default(cuid())
  email    String
  server   Server? @relation(fields: [serverId], references: [id])
  serverId String?
}

model ServerNumber {
  id       String  @id @default(cuid())
  number   String
  server   Server? @relation(fields: [serverId], references: [id])
  serverId String?
}

model ServerAddress {
  id       String  @id @default(cuid())
  address  String
  server   Server? @relation(fields: [serverId], references: [id])
  serverId String?
}

model ServerAge {
  id       String  @id @default(cuid())
  age      String
  server   Server? @relation(fields: [serverId], references: [id])
  serverId String?
}

model User {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(255)
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  emails    Email[]
  numbers   Number[]
  address   Address[]
  age       Age[]
  orders    Order[]
}

model Email {
  id        String  @id @default(cuid())
  email     String
  User      User?   @relation(fields: [userEmail], references: [email])
  userEmail String?
}

model Number {
  id        String  @id @default(cuid())
  number    String
  User      User?   @relation(fields: [userEmail], references: [email])
  userEmail String?
}

model Address {
  id        String  @id @default(cuid())
  address   String
  User      User?   @relation(fields: [userEmail], references: [email])
  userEmail String?
}

model Age {
  id        String  @id @default(cuid())
  age       String
  User      User?   @relation(fields: [userEmail], references: [email])
  userEmail String?
}

model Order {
  id        String   @id @default(cuid())
  price     Int
  emails    Int
  isPaid    Boolean  @default(false)
  address   Boolean  @default(false)
  age       Boolean  @default(false)
  phone     Boolean  @default(false)
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}
