generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Server {
  id    String       @id @default(cuid())
  datas ServerData[] @relation("ServerToData")
}

model ServerData {
  id       String @id @default(cuid())
  email    String
  number   String
  address  String
  age      String
  server   Server @relation("ServerToData", fields: [serverId], references: [id])
  serverId String

  @@index([serverId])
}

model User {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(255)
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  emails    Email[]   @relation("EmailToUser")
  numbers   Number[]  @relation("NumberToUser")
  addresses Address[] @relation("AddressToUser")
  ages      Age[]     @relation("AgeToUser")
  orders    Order[]   @relation("OrderToUser")
}

model Email {
  id     String @id @default(cuid())
  email  String
  user   User   @relation("EmailToUser", fields: [userId], references: [email])
  userId String
}

model Number {
  id     String @id @default(cuid())
  number String
  user   User   @relation("NumberToUser", fields: [userId], references: [email])
  userId String
}

model Address {
  id      String @id @default(cuid())
  address String
  user    User   @relation("AddressToUser", fields: [userId], references: [email])
  userId  String
}

model Age {
  id     String @id @default(cuid())
  age    String
  user   User   @relation("AgeToUser", fields: [userId], references: [email])
  userId String
}

model Order {
  id        String   @id @default(cuid())
  price     Int
  emails    Int
  isPaid    Boolean  @default(false)
  address   Boolean  @default(false)
  age       Boolean  @default(false)
  phone     Boolean  @default(false)
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("OrderToUser", fields: [userId], references: [id])
  userId    String
}
