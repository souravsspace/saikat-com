generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Data {
  id         BigInt   @id @default(autoincrement())
  first_name String?  @db.VarChar(100)
  last_name  String?  @db.VarChar(100)
  address    String?
  country    String?  @db.VarChar(70)
  city       String?  @db.VarChar(70)
  state      String?  @db.VarChar(70)
  zip        Int?
  phone      Int?
  carrier    String?
  gender     String?  @db.VarChar(30)
  ethnicity  String?
  ownrent    String?  @db.VarChar(30)
  latitude   Decimal? @db.Decimal
  longitude  Decimal? @db.Decimal
  email      String?  @db.VarChar(100)
  age        Int?
}

model BlackListData {
  id           String   @id @default(cuid())
  first_name   String?  @db.VarChar(100)
  last_name    String?  @db.VarChar(100)
  email        String?  @db.VarChar(100)
  address      String?
  country      String?  @db.VarChar(70)
  age          Int?
  city         String?  @db.VarChar(70)
  state        String?  @db.VarChar(70)
  zip          Int?
  phone        Int?
  carrier      String?
  gender       String?  @db.VarChar(30)
  ethnicity    String?
  ownrent      String?  @db.VarChar(30)
  latitude     Decimal? @db.Decimal
  longitude    Decimal? @db.Decimal
  serverDataId BigInt
}

model User {
  id            String         @id @default(cuid())
  name          String         @db.VarChar(255)
  email         String         @unique
  password      String         @db.Text
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orders        Order[]        @relation("OrderToUser")
  purchaseDatas PurchaseData[] @relation("PurchaseDataToUser")
}

model PurchaseData {
  id        String  @id @default(cuid())
  name      String?
  email     String?
  phone     Int?
  age       Int?
  address   String?
  gender    String?
  user      User?   @relation("PurchaseDataToUser", fields: [userId], references: [id])
  userId    String?
  orderData Order   @relation("PurchaseDataToOrder", fields: [orderId], references: [id])
  orderId   String
}

model Order {
  id           String         @id @default(cuid())
  price        Int
  emails       Int
  isPaid       Boolean
  address      Boolean        @default(false)
  age          Boolean        @default(false)
  phone        Boolean        @default(false)
  country      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userId       String
  user         User           @relation("OrderToUser", fields: [userId], references: [id])
  purchaseData PurchaseData[] @relation("PurchaseDataToOrder")
}
