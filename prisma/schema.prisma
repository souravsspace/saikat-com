generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Data {
  id         BigInt   @id @default(autoincrement())
  first_name String?  @db.VarChar(100)
  last_name  String?  @db.VarChar(100)
  address    String?
  country    String?  @db.VarChar(70)
  city       String?  @db.VarChar(70)
  state      String?  @db.VarChar(70)
  zip        Int?
  phone      Int?
  carrier    String?
  gender     String?  @db.VarChar(30)
  ethnicity  String?
  ownrent    String?  @db.VarChar(30)
  latitude   Decimal? @db.Decimal
  longitude  Decimal? @db.Decimal
}

model User {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(255)
  email     String    @unique
  password  String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  addresses Address[] @relation("AddressToUser")
  ages      Age[]     @relation("AgeToUser")
  emails    Email[]   @relation("EmailToUser")
  numbers   Number[]  @relation("NumberToUser")
  orders    Order[]   @relation("OrderToUser")
}

model Email {
  id     String @id @default(cuid())
  email  String
  userId String
  user   User   @relation("EmailToUser", fields: [userId], references: [email])
}

model Number {
  id     String @id @default(cuid())
  number String
  userId String
  user   User   @relation("NumberToUser", fields: [userId], references: [email])
}

model Address {
  id      String @id @default(cuid())
  address String
  userId  String
  user    User   @relation("AddressToUser", fields: [userId], references: [email])
}

model Age {
  id     String @id @default(cuid())
  age    String
  userId String
  user   User   @relation("AgeToUser", fields: [userId], references: [email])
}

model Order {
  id        String   @id @default(cuid())
  price     Int
  emails    Int
  isPaid    Boolean  @default(false)
  address   Boolean  @default(false)
  age       Boolean  @default(false)
  phone     Boolean  @default(false)
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation("OrderToUser", fields: [userId], references: [id])
}
